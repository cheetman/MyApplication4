package com.example.sychiprpclibmcc.rpc;import java.util.List;import com.example.sychiprpclibmcc.bean.EventParam;import com.example.sychiprpclibmcc.bean.RepLanIpGw;import com.example.sychiprpclibmcc.bean.RpcDevice;import com.example.sychiprpclibmcc.rep.RepCTRSchTaskListGet;import com.example.sychiprpclibmcc.rep.RepCTRSchTaskListGet.RpcScheduler;import com.example.sychiprpclibmcc.rep.RepCommonResult;import com.example.sychiprpclibmcc.rep.RepDMRACGet;import com.example.sychiprpclibmcc.rep.RepDMRACSpecDataGet;import com.example.sychiprpclibmcc.rep.RepDMRBatScan;import com.example.sychiprpclibmcc.rep.RepDMREsGet;import com.example.sychiprpclibmcc.rep.RepDMREsGet.RpcEsData;import com.example.sychiprpclibmcc.rep.RepDMRFHGet;import com.example.sychiprpclibmcc.rep.RepDMRFHSpecDataGet;import com.example.sychiprpclibmcc.rep.RepDMRIRExFuncListGet;import com.example.sychiprpclibmcc.rep.RepDMRLevelGet;import com.example.sychiprpclibmcc.rep.RepDMROnOffGet;import com.example.sychiprpclibmcc.rep.RepDMRPing;import com.example.sychiprpclibmcc.rep.RepSYSDdnsInfoGet;import com.example.sychiprpclibmcc.rep.RepSYSGwInfoGet;import com.example.sychiprpclibmcc.rep.RepUSMAuth;import com.example.sychiprpclibmcc.rep.RepUSMGnUserListGet;import com.example.sychiprpclibmcc.rep.RepDMRRoomListGet.RpcRoom;import com.example.sychiprpclibmcc.rep.RepDMRScnCfgListGet.RpcSceneCfg;import com.example.sychiprpclibmcc.rep.RepDMRScnGenListGet.RpcSceneGen;import com.example.sychiprpclibmcc.rpc.RpcCommand;/** *  * Title: RpcCallBackIf <br> * Description: Rpc Client API's callback interface <br> * Copyright: SyChip Electronic Technology (Shanghai) Ltd.A subsidiary of muRata. All Rights Reserved. <br> *  *  * @author SyChip * @version 0.0.01 *  *  <br><p>Update date:2017/09/16 *  *<br>1. init *  * */public interface RpcCallBackIf {		/**	 * Discover IP GW in LAN area	 * if rep = null means discover has ended 	 * @param rep  {@link RepLanIpGw} result of action.	 * 	 */	void ssdpCallBack(RepLanIpGw rep);		/**	 * Gateway connected status	 * 	 * @param isConnected	 *            true or false	 */	void connected(boolean isConnected);		/**	 * Gateway connected status	 * 	 */	void disconnected();	 	/**	 * <p>Authentication to RPC server<p>After call	 * {@link RpcCommand#authen(String,String,boolean)},You can listen Authentication to RPC server's result by this.<p> 	 * 	 * @param rep	 *            {@link RepUSMAuth} result of action.	 */	void authenCallBack(RepUSMAuth rep);	/**	 * <p>Query IP GW Information<p>After call	 * {@link RpcCommand#subscribeEvent(List,boolean)},You can listen Query IP GW Information's result by this.<p> 	 * 	 * @param rep	 *            {@link RepSYSGwInfoGet} result of action.	 */	void getIpGwInfoCallBack(RepSYSGwInfoGet rep);	void getDdnsInfoCallBack(RepSYSDdnsInfoGet rep);	void setEcOptionCallBack(RepCommonResult rep);	void addUserCallBack(RepCommonResult rep);	void changeUserCallBack(RepCommonResult rep);	void resetUserCallBack(RepCommonResult rep);	void delUserCallBack(RepCommonResult rep);	void getUserListCallBack(RepUSMGnUserListGet rep);	void getEsListCallBack(List<RpcEsData> list, RepDMREsGet rep);	void getRoomListCallBack(List<RpcRoom> list);	void getDeviceListCallBack(List<RpcDevice> list);	void getDeviceScnNumListCallBack(List<RpcDevice> list);	void getScnCfgListCallBack(int scnId, List<RpcSceneCfg> list);	void getScnGenListCallBack(List<RpcSceneGen> list);	void getIRExFuncListCallBack(int devId, RepDMRIRExFuncListGet rep);	 	void eventUSMEVTOffline(EventParam evtParam);	void eventDMREVTLowBat(EventParam evtParam);	void eventDMREVTLevel(EventParam evtParam);	void eventDMREVTOnOff(EventParam evtParam);	void eventDMREVTFH(EventParam evtParam);	void eventDMREVTAC(EventParam evtParam);	void eventDMREVTES(EventParam evtParam);	void eventCTREVTSchStat(EventParam evtParam);			void discoverNetworkCallBack(RepCTRSchTaskListGet rep);	 	void pingCallBack(RepDMRPing rep);	void scanBatteryCallBack(RepDMRBatScan rep);	void setDeviceNameCallBack(int devId, RepCommonResult rep);	void setSceneNameCallBack(int scnId, RepCommonResult rep); 	void addSceneDeviceCallBack(int scnId, int devId, RepCommonResult rep); 	void delSceneDeviceCallBack(int scnId, int devId, RepCommonResult rep);	 	void recallSceneCallBack(int scnId, RepCommonResult rep);		 	void sceneOperateCallBack(RepCommonResult rep); 	void getOnOffCallBack(int devId, RepDMROnOffGet rep); 	void setOnOffTogCallBack(int devId, RepCommonResult rep);	void getACCallBack(int devId, RepDMRACGet rep);	void ctrlACCallBack(int devId, RepCommonResult rep);	void getFHCallBack(int devId, RepDMRFHGet rep);	void getACSpecDataCallBack(int devId, RepDMRACSpecDataGet rep);	void getFHSpecDataCallBack(int devId, RepDMRFHSpecDataGet rep);	void ctrlFHCallBack(int devId, RepCommonResult rep); 	void getLevelCallBack(int devId, RepDMRLevelGet rep);	 	void setLevelCallBack(int devId, RepCommonResult rep);  	void moveCallBack(int devId, RepCommonResult rep); 	void stopCallBack(int devId, RepCommonResult rep);	 	void sendIrCodeCallBack(RepCommonResult rep); 	void bgmCtrlCallBack(int devId, RepCommonResult rep);	void getSchedulerListCallBack(List<RpcScheduler> list);	void clearSchedulerCallBack(int schTaskId, RepCommonResult rep);	void setSchedulerParamCallBack(int schTaskId, RepCommonResult rep);	void operSchedulerCallBack(int schTaskId, RepCommonResult rep);			/**	 * Exception's callback	 * @param ex Exception	 * @param exType Exception's type 	 * @see ErrorType	 */	void exceptionCallBack(Exception ex, EventParam param);		/**	 * network's state change callback	 */	void networkConnectedCallBack();}