package com.example.sychiprpclibmcc.rpc;import java.lang.reflect.Type;import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.InetAddress;import java.net.InetSocketAddress;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Timer;import java.util.concurrent.atomic.AtomicReference;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.google.gson.JsonElement;import com.google.gson.JsonPrimitive;import com.google.gson.JsonSerializationContext;import com.google.gson.JsonSerializer;import com.google.gson.reflect.TypeToken;import com.example.sychiprpclibmcc.bean.*;import com.example.sychiprpclibmcc.rep.RepCTRSchTaskListGet;import com.example.sychiprpclibmcc.rep.RepCTRSchTaskListGet.RpcScheduler;import com.example.sychiprpclibmcc.rep.RepCommonResult;import com.example.sychiprpclibmcc.rep.RepDMRACGet;import com.example.sychiprpclibmcc.rep.RepDMRACSpecDataGet;import com.example.sychiprpclibmcc.rep.RepDMRBatScan;import com.example.sychiprpclibmcc.rep.RepDMRDevListGet;import com.example.sychiprpclibmcc.rep.RepDMRDevScnNumListGet;import com.example.sychiprpclibmcc.rep.RepDMREsGet;import com.example.sychiprpclibmcc.rep.RepDMRFHGet;import com.example.sychiprpclibmcc.rep.RepDMRFHSpecDataGet;import com.example.sychiprpclibmcc.rep.RepDMRIRExFuncListGet;import com.example.sychiprpclibmcc.rep.RepDMRLevelGet;import com.example.sychiprpclibmcc.rep.RepDMROnOffGet;import com.example.sychiprpclibmcc.rep.RepDMRPing;import com.example.sychiprpclibmcc.rep.RepDMRRoomListGet;import com.example.sychiprpclibmcc.rep.RepDMRScnCfgListGet;import com.example.sychiprpclibmcc.rep.RepDMRScnGenListGet;import com.example.sychiprpclibmcc.rep.RepEvent;import com.example.sychiprpclibmcc.rep.RepSYSDdnsInfoGet;import com.example.sychiprpclibmcc.rep.RepSYSGwInfoGet;import com.example.sychiprpclibmcc.rep.RepUSMAuth;import com.example.sychiprpclibmcc.rep.RepUSMGnUserListGet;import com.example.sychiprpclibmcc.rep.RepDMREsGet.RpcEsData;import com.example.sychiprpclibmcc.rep.RepDMRRoomListGet.RpcRoom;import com.example.sychiprpclibmcc.rep.RepDMRScnCfgListGet.RpcSceneCfg;import com.example.sychiprpclibmcc.rep.RepDMRScnGenListGet.RpcSceneGen;import com.example.sychiprpclibmcc.req.ParamBaseListGet;import com.example.sychiprpclibmcc.req.ParamDevId;import com.example.sychiprpclibmcc.req.ReqCTRSchOptionSet;import com.example.sychiprpclibmcc.req.ReqCTRSchOptionSet.ParamCTRSchOptionSet;import com.example.sychiprpclibmcc.req.ReqCTRSchTaskClear;import com.example.sychiprpclibmcc.req.ReqCTRSchTaskClear.ParamCTRSchTaskClear;import com.example.sychiprpclibmcc.req.ReqCTRSchTaskParamSet;import com.example.sychiprpclibmcc.req.ReqCTRSchTaskParamSet.ParamCTRSchTaskParamSet;import com.example.sychiprpclibmcc.req.ReqCommonDevId;import com.example.sychiprpclibmcc.req.ReqCommonListGet;import com.example.sychiprpclibmcc.req.ReqCommonParam;import com.example.sychiprpclibmcc.req.ReqDMRACCtrl;import com.example.sychiprpclibmcc.req.ReqDMRACCtrl.ParamDMRACCtrl;import com.example.sychiprpclibmcc.req.ReqDMRBgmCtrl;import com.example.sychiprpclibmcc.req.ReqDMRBgmCtrl.ParamDMRBgmCtrl;import com.example.sychiprpclibmcc.req.ReqDMRDevListGet;import com.example.sychiprpclibmcc.req.ReqDMRDevNameSet;import com.example.sychiprpclibmcc.req.ReqDMRDevNameSet.ParamDMRDevNameSet;import com.example.sychiprpclibmcc.req.ReqDMRFHCtrl;import com.example.sychiprpclibmcc.req.ReqDMRFHCtrl.ParamDMRFHCtrl;import com.example.sychiprpclibmcc.req.ReqDMRIRSend;import com.example.sychiprpclibmcc.req.ReqDMRLevelMove;import com.example.sychiprpclibmcc.req.ReqDMRLevelSet;import com.example.sychiprpclibmcc.req.ReqDMROnOffSet;import com.example.sychiprpclibmcc.req.ReqDMRPingDevIdList;import com.example.sychiprpclibmcc.req.ReqDMRScnAdd;import com.example.sychiprpclibmcc.req.ReqDMRScnCfgListGet;import com.example.sychiprpclibmcc.req.ReqDMRScnNameSet;import com.example.sychiprpclibmcc.req.ReqDMRScnNameSet.ParamDMRScnNameSet;import com.example.sychiprpclibmcc.req.ReqUSMAuth;import com.example.sychiprpclibmcc.req.ReqUSMEcOptionSet;import com.example.sychiprpclibmcc.req.ReqUSMGnUserAdd;import com.example.sychiprpclibmcc.req.ReqUSMGnUserDel;import com.example.sychiprpclibmcc.req.ReqUSMUserChange;import com.example.sychiprpclibmcc.req.ReqUSMUserReset;import com.example.sychiprpclibmcc.req.ReqDMRDevListGet.ParamDMRDevListGet;import com.example.sychiprpclibmcc.req.ReqDMRIRSend.ParamDMRIRSend;import com.example.sychiprpclibmcc.req.ReqDMRLevelMove.ParamDMRLevelMove;import com.example.sychiprpclibmcc.req.ReqDMRLevelSet.ParamDMRLevelSet;import com.example.sychiprpclibmcc.req.ReqDMROnOffSet.ParamDMROnOffSet;import com.example.sychiprpclibmcc.req.ReqDMRScnCall;import com.example.sychiprpclibmcc.req.ReqDMRScnCall.ParamDMRScnCall;import com.example.sychiprpclibmcc.req.ReqDMRScnCfgListGet.ParamDMRScnCfgListGet;import com.example.sychiprpclibmcc.req.ReqDMRScnDel;import com.example.sychiprpclibmcc.req.ReqDMRScnDel.ParamDMRScnDel;import com.example.sychiprpclibmcc.req.ReqUSMAuth.ParamUSMAuth;import com.example.sychiprpclibmcc.req.ReqUSMEcOptionSet.ParamUSMEcOptionSet;import com.example.sychiprpclibmcc.req.ReqUSMGnUserAdd.ParamUSMGnUserAdd;import com.example.sychiprpclibmcc.req.ReqUSMGnUserDel.ParamUSMGnUserDel;import com.example.sychiprpclibmcc.req.ReqUSMUserChange.ParamUSMUserChange;import com.example.sychiprpclibmcc.req.ReqUSMUserReset.ParamUSMUserReset;import com.example.sychiprpclibmcc.rpc.SslSocketKit.SslSocketReadIf;import com.example.sychiprpclibmcc.rpc.test.SslTest;/** *  * Title: RpcCommand * <p> * Description: Rpc client API * <p> * Copyright: SyChip Electronic Technology (Shanghai) Ltd.A subsidiary of * muRata. All Rights Reserved. * <p> *  * @author SyChip * @version 0.0.01 *  *          <p> *          Update date:2014/04/16 *          <p> *          1. fix bug of last content's length *          <p> *  */public class RpcCommand implements SslSocketReadIf {	public enum ACMode {		Auto(1),Dehumidify(2), Cool(3), Wind(4), Heat(5);		int value;		private ACMode(int value) {			this.value = value;		}	}	public enum ACWind {		Auto(1),Low(2), Medium(3), High(4);		int value;		private ACWind(int value) {			this.value = value;		}	}	public enum MusicCmd {		Off(1), On(2), Mode(3), Play(4), Pause(5), Prev(6), Next(7), Vol(8);		int value;		private MusicCmd(int value) {			this.value = value;		}	}		public enum OnOff {		Off(1), On(2), Toggle(3);		int value;		private OnOff(int value) {			this.value = value;		}	}	public enum MoveUpDown {		Up(1), Down(2);		int value;		private MoveUpDown(int value) {			this.value = value;		}	}	public enum IRCodeType {		LibCode(0), LearnCode(1);		int value;		private IRCodeType(int value) {			this.value = value;		}	}	public enum SchedulerOption {		SchedulerDisabled(1), SchedulerEnabled(2);		int value;		private SchedulerOption(int value) {			this.value = value;		}	}	public enum RpcDeviceType {		Device_ULTI(1), Device_IPC(2), Device_AC(3), Device_FH(4), Device_AirC(				5);		int value;		private RpcDeviceType(int value) {			this.value = value;		}	}	public static boolean isDebug = false;	public static LogIf log = new LogDefault();	private int keepLiveSeconds;	private ArrayList<RpcTask> listTask = new ArrayList<RpcTask>();	private static RpcCommand instance;	private PlatForm platform;	private RpcCallBackIf rpcCallback;	private RpcCallBackIf rpcCallbackUlti;	private Gson gson;	private static boolean showLog = false;	private Timer taskTimeoutTimer;	private TimeoutTask rpcTimeoutTask = new TimeoutTask();	public boolean isAdmin = false;	public boolean isPing = false;	List<RpcSceneGen> listRpcSceneGen;	List<RpcSceneCfg> listRpcSceneCfg;	int scnCfgId;	List<RpcScheduler> listRpcScheduler;	List<RpcRoom> listRpcRoom;	List<RpcDevice> listRpcDevice;	List<RpcDevice> listRpcDeviceScnNum;	private boolean connectCallbacked = false;	// private static int maxLength = 2*1024;	/**	 * transaction Id	 */	private static int transId = 0;	private synchronized void sleep() {		try {			wait(100);		} catch (InterruptedException e) {		}	}	/**	 * get a Gson object that support double	 * 	 * @return	 */	private Gson getDoubleGson() {		Gson gson = new GsonBuilder()				.registerTypeAdapter(Double.class,						new JsonSerializer<Double>() {							@Override							public JsonElement serialize(Double src, Type arg1,									JsonSerializationContext arg2) {								if (src.isNaN() || src.isInfinite()) {									return null;								} else {									return new JsonPrimitive(new DecimalFormat(											"#").format(src));								}							}						}).disableHtmlEscaping().create();		return gson;	}	/**	 * Get Rpc instance	 * 	 * @return RpcCommand	 */	public static RpcCommand getInstance() {		return instance;	}	/**	 * Get Rpc is connected	 * 	 * @return true or false	 */	public boolean isConnected() {		return SslSocketKit.isConnected();	}	/**	 * RpcCommand init	 * 	 * @param platform	 *            {@link RepCommonResult}	 * @param rpcLis	 *            {@link RpcCallBackIf}	 * @param keepLiveSeconds	 *            keepLiveSeconds	 */	public static void init(PlatForm platform, RpcCallBackIf rpcLis,			int keepLiveSeconds) {		try {			if (instance == null) {				instance = new RpcCommand(platform, rpcLis, keepLiveSeconds);			} else {				instance.rpcCallback = rpcLis;			}		} catch (Exception e) {			log(e);			e.printStackTrace();		}	}	public static void reInit(PlatForm platform, RpcCallBackIf rpcLis,			int keepLiveSeconds) {		try {				instance = new RpcCommand(platform, rpcLis, keepLiveSeconds);		} catch (Exception e) {			log(e);			e.printStackTrace();		}	}		public void setULTIConfigCallback(RpcCallBackIf rpcLis) {		rpcCallbackUlti = rpcLis;	}	private RpcCommand(PlatForm platform, RpcCallBackIf rpcLis,			int keepLiveSeconds) {		this.platform = platform;		this.rpcCallback = rpcLis;		this.keepLiveSeconds = keepLiveSeconds;		this.gson = getDoubleGson();	}	/**	 * Cancel discover IP GW in LAN area.	 */	public void cancelDiscoverIpGwInLan() {		isCancelDiscover = true;		try {			broadcastSocket.disconnect();		} catch (Exception e) {			e.printStackTrace();			log(e);			isDiscoverIng = false;			rpcCallback.ssdpCallBack(null);		}	}	boolean isDiscoverIng = false;	boolean isCancelDiscover = false;	DatagramSocket broadcastSocket;	ArrayList<RepLanIpGw> listIpGw;	/**	 * Discover IP GW in LAN area	 * <p>	 * None RPC network communication API, including low layer link	 * establishment and tear down, discovering IP GW in LAN area;	 * <p>	 * Limited to RPC client. At one time, only one API session including API	 * ARSP can be performed for current RPC client.	 * <p>	 * Can be Canceled: No	 * <p>	 * API: RPC_SYS_Disc_IP_GW	 * 	 * @param ipAddress	 *            （Only support Inet4Address）	 * @param destAddress	 *            when PC:destAddress = InetAddress.getByName("255.255.255.255")	 *            <p>	 *            when Android:	 *            <p>	 *            WifiManager wifi = (WifiManager)	 *            getActivity().getSystemService(Context.WIFI_SERVICE);	 *            <p>	 *            DhcpInfo dhcp = wifi.getDhcpInfo();	 *            <p>	 *            int broadcast = (dhcp.ipAddress &amp; dhcp.netmask) |	 *            ~dhcp.netmask;	 *            <p>	 *            byte[] quads = new byte[4];	 *            <p>	 *            for (int k = 0; k &lt; 4; k++)	 *            <p>	 *            quads[k] = (byte) ((broadcast &gt;&gt; k * 8) &amp; 0xFF);	 *            <p>	 *            return InetAddress.getByAddress(quads);	 * 	 * @return ArrayList&lt;{@link RepLanIpGw} &gt;	 */	public synchronized void ssdp(final InetAddress ipAddress,			final InetAddress destAddress) {		while (isDiscoverIng) {			sleep();		}		isDiscoverIng = true;		isCancelDiscover = false;		final int SSDP_PORT = 1900;		listIpGw = new ArrayList<RepLanIpGw>();		if (isDebug) {			List<RepLanIpGw> listIpGw = SslTest.repDiscoverIpGwInLan();			for (RepLanIpGw rep : listIpGw) {				rpcCallback.ssdpCallBack(rep);			}			rpcCallback.ssdpCallBack(null);		} else {			new Thread() {				public void run() {					try {						for (int i = 1; i <= 3; i++) {							if (isCancelDiscover) {								isDiscoverIng = false;								rpcCallback.ssdpCallBack(null);								return;							}							String bcText = "M-SEARCH * HTTP/1.1\r\nHOST: "									+ "255.255.255.255"									+ ":1900\r\nMAN: ssdp:discover\r\nMX: 2\r\nST: Schneider Electric:U30IPGWZB_PL\r\n";							byte[] sendMSG = bcText.getBytes();							if (ipAddress == null) {								broadcastSocket = new DatagramSocket();							} else {								broadcastSocket = new DatagramSocket(										new InetSocketAddress(ipAddress, 0));							}							broadcastSocket.setBroadcast(true);							DatagramPacket packet = new DatagramPacket(sendMSG,									sendMSG.length, destAddress, SSDP_PORT);							broadcastSocket.send(packet);							broadcastSocket.setSoTimeout(3000);							DatagramPacket rcvdp;							while (true) {								if (isCancelDiscover) {									isDiscoverIng = false;									rpcCallback.ssdpCallBack(null);									return;								}								try {									byte[] buf = new byte[1024];									rcvdp = new DatagramPacket(buf, buf.length);									broadcastSocket.receive(rcvdp);								} catch (Exception e) {									log(e);									if (i == 3) {										isDiscoverIng = false;										rpcCallback.ssdpCallBack(null);									}									break;								}								if (isCancelDiscover) {									isDiscoverIng = false;									rpcCallback.ssdpCallBack(null);									return;								}								String buff = new String(rcvdp.getData())										.trim();								if (showLog) {									System.err.println(buff);								}								String[] resp = buff.split("\r\n");								boolean isExist = false;								for (String str : resp) {									if (str.startsWith("ST:")) {										String[] values = str.split(" ");										RepLanIpGw ipgw = new RepLanIpGw();										ipgw.setUniqueId(rcvdp.getAddress()												.getHostAddress());										ipgw.setIp(rcvdp.getAddress()												.toString().replace("/", ""));										ipgw.setPort("55700");										for (String val : values) {											if (val.startsWith("EthMac")) {												ipgw.setEthMac(val.replace(														"EthMac:", ""));											} else if (val													.startsWith("SystemName")) {												ipgw.setSystemName(val.replace(														"SystemName:", ""));											}										}										for (RepLanIpGw _ipgw : listIpGw) {											if (_ipgw.getEthMac().equals(													ipgw.getEthMac())) {												isExist = true;												break;											}										}										if (!isExist												&& ipgw.getEthMac() != null												&& ipgw.getSystemName() != null) {											rpcCallback.ssdpCallBack(ipgw);											listIpGw.add(ipgw);										}										break;									}								}							}							broadcastSocket.close();						}					} catch (Exception e) {						e.printStackTrace();						log(e);						rpcCallback.ssdpCallBack(null);					} finally {						isDiscoverIng = false;					}				}			}.start();		}		isDiscoverIng = false;	}	/**	 * Connect to gateway If platform is android,you should get connected result	 * by {@link RpcCallBackIf#connected(boolean)}	 * 	 * @param ip	 *            ip	 * @param port	 *            port	 */	public synchronized void connect(final String ip, final int port) {		connectCallbacked = false;		isAdmin = false;		if (instance == null) {			EventParam param = new EventParam(ErrorType.RpcCmdNotInit);			rpcCallback.exceptionCallBack(					new Exception(ErrorType.RpcCmdNotInit.toString()), param);			return;		}		if (platform == PlatForm.PC) {			SslSocketKit.connect(ip, port, this);		} else if (platform == PlatForm.Android) {			new Thread() {				public void run() {					SslSocketKit.connect(ip, port, instance);				}			}.start();		}	}	/**	 * network's state change callback	 * <p>	 * You can call this method to notice UI when network's state changed.	 * 	 * @param isConnected	 *            isConnected	 */	public void networkStatusChange(boolean isConnected) {		if (isConnected) {			rpcCallback.networkConnectedCallBack();		} else {			disconnected();		}	}	/**	 * get request is in processing	 * 	 * @param id	 *            {@link RpcJsonParm}	 * @param nwkAddr	 *            nwkAddr	 * @param ep	 *            ep	 * @return true or false	 */	private RpcTask getRpcTask(int transId) {		for (RpcTask task : listTask) {			if (task.getTransId() == transId) {				return task;			}		}		return null;	}	/**	 * delete request is in processing	 * 	 * @param id	 *            {@link RpcJsonParm}	 * @param nwkAddr	 * @param ep	 */	private void deleteRpcTask(int transId) {		for (RpcTask task : listTask) {			if (task.getTransId() == transId) {				listTask.remove(task);				return;			}		}	}	private final class TimeoutTask extends java.util.TimerTask {		@Override		public synchronized void run() {			for (int i = listTask.size() - 1; i >= 0; i--) {				RpcTask task = listTask.get(i);				if (task.isTimeOut()) {					int requestId = task.getRequestId();					if (requestId == RpcJsonParm.Id_USMAuth) {						isAdmin = false;						// return;						RepUSMAuth result = new RepUSMAuth();						result.setRequest(task.getReqInfo());						result.setTimeout(true);						rpcCallback.authenCallBack(result);					} else if (requestId == RpcJsonParm.Id_SYSGwInfoGet) {						RepSYSGwInfoGet result = new RepSYSGwInfoGet();						result.setTimeout(true);						result.setRequest(task.getReqInfo());						rpcCallback.getIpGwInfoCallBack(result);					} else if (requestId == RpcJsonParm.Id_SYSDdnsInfoGet) {						RepSYSDdnsInfoGet result = new RepSYSDdnsInfoGet();						result.setTimeout(true);						result.setRequest(task.getReqInfo());						rpcCallback.getDdnsInfoCallBack(result);					} else if (requestId == RpcJsonParm.Id_USMEcOptionSet) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						rpcCallback.setEcOptionCallBack(result);					} else if (requestId == RpcJsonParm.Id_USMGnUserAdd) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						rpcCallback.addUserCallBack(result);					} else if (requestId == RpcJsonParm.Id_USMUserChange) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						rpcCallback.changeUserCallBack(result);					} else if (requestId == RpcJsonParm.Id_USMUserReset) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						rpcCallback.resetUserCallBack(result);					} else if (requestId == RpcJsonParm.Id_USMGnUserDel) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						rpcCallback.delUserCallBack(result);					} else if (requestId == RpcJsonParm.Id_USMGnUserListGet) {						RepUSMGnUserListGet result = new RepUSMGnUserListGet();						result.setTimeout(true);						rpcCallback.getUserListCallBack(result);					} else if (requestId == RpcJsonParm.Id_USMCancelLast) {						resultCancelLast = new RepCommonResult();						resultCancelLast.setTimeout(true);					} else if (requestId == RpcJsonParm.Id_DMRPing) {						isPing = false;						RepDMRPing result = new RepDMRPing();						result.setTimeout(true);						rpcCallback.pingCallBack(result);					} else if (requestId == RpcJsonParm.Id_DMRBatScan) {						RepDMRBatScan result = new RepDMRBatScan();						result.setTimeout(true);						rpcCallback.scanBatteryCallBack(result);					} else if (requestId == RpcJsonParm.Id_DMROnOffGet) {						RepDMROnOffGet result = new RepDMROnOffGet();						result.setTimeout(true);						ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();						result.setRequest(req);						rpcCallback.getOnOffCallBack(								req.getParams().getDevId(), result);					} else if (requestId == RpcJsonParm.Id_DMROnOffSet) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMROnOffSet req = (ReqDMROnOffSet) task.getReqInfo();						result.setRequest(req);						rpcCallback.setOnOffTogCallBack(req.getParams()								.getDevId(), result);					} else if (requestId == RpcJsonParm.Id_DMRACGet) {						RepDMRACGet result = new RepDMRACGet();						result.setTimeout(true);						ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();						result.setRequest(req);						rpcCallback.getACCallBack(req.getParams().getDevId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRACCtrl) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRACCtrl req = (ReqDMRACCtrl) task.getReqInfo();						req.getParams().setTemp(req.getParams().getTemp()/10);						result.setRequest(req);						rpcCallback.ctrlACCallBack(req.getParams().getDevId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRFHGet) {						RepDMRFHGet result = new RepDMRFHGet();						result.setTimeout(true);						ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();						result.setRequest(req);						rpcCallback.getFHCallBack(req.getParams().getDevId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRFHCtrl) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRFHCtrl req = (ReqDMRFHCtrl) task.getReqInfo();						req.getParams().setTemp(req.getParams().getTemp()/10);						result.setRequest(req);						rpcCallback.ctrlFHCallBack(req.getParams().getDevId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRLevelGet) {						RepDMRLevelGet result = new RepDMRLevelGet();						result.setTimeout(true);						ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();						result.setRequest(req);						rpcCallback.getLevelCallBack(								req.getParams().getDevId(), result);					} else if (requestId == RpcJsonParm.Id_DMRLevelSet) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRLevelSet req = (ReqDMRLevelSet) task.getReqInfo();						result.setRequest(req);						rpcCallback.setLevelCallBack(								req.getParams().getDevId(), result);					} else if (requestId == RpcJsonParm.Id_DMRLevelMove) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRLevelMove req = (ReqDMRLevelMove) task.getReqInfo();						result.setRequest(req);						rpcCallback.moveCallBack(req.getParams().getDevId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRLevelStop) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();						result.setRequest(req);						rpcCallback.stopCallBack(req.getParams().getDevId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRDevNameSet) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRDevNameSet req = (ReqDMRDevNameSet) task.getReqInfo();						result.setRequest(req);						rpcCallback.setDeviceNameCallBack(req.getParams().getDevId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRScnNameSet) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRScnNameSet req = (ReqDMRScnNameSet) task.getReqInfo();						result.setRequest(req);						rpcCallback.setSceneNameCallBack(req.getParams().getScnId(),								result);					} else if (requestId == RpcJsonParm.Id_DMRScnAdd) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRScnAdd req = (ReqDMRScnAdd) task.getReqInfo();						result.setRequest(req);						rpcCallback								.addSceneDeviceCallBack(req.getParams()										.getScnId(),										req.getParams().getDevId(), result);					} else if (requestId == RpcJsonParm.Id_DMRBGMCtrl) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRBgmCtrl req = (ReqDMRBgmCtrl) task.getReqInfo();						result.setRequest(req);						rpcCallback.bgmCtrlCallBack(req.getParams().getDevId(), result);					} else if (requestId == RpcJsonParm.Id_DMRESGet) {						RepDMREsGet result = new RepDMREsGet();						result.setTimeout(true);						ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();						result.setRequest(req);						rpcCallback.getEsListCallBack(new ArrayList<RpcEsData>(), result);					} else if (requestId == RpcJsonParm.Id_DMRScnDel) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRScnDel req = (ReqDMRScnDel) task.getReqInfo();						result.setRequest(req);						rpcCallback								.delSceneDeviceCallBack(req.getParams()										.getScnId(),										req.getParams().getDevId(), result);					} else if (requestId == RpcJsonParm.Id_DMRScnRecall) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqDMRScnCall req = (ReqDMRScnCall) task.getReqInfo();						result.setRequest(req);						rpcCallback.recallSceneCallBack(req.getParams()								.getScnId(), result);					} else if (requestId == RpcJsonParm.Id_DMRScnCfgListGet) {						RepDMRScnCfgListGet result = new RepDMRScnCfgListGet();						result.setTimeout(true);						ReqDMRScnCfgListGet req = (ReqDMRScnCfgListGet) task								.getReqInfo();						result.setRequest(req);						rpcCallback.getScnCfgListCallBack(req.getParams()								.getScnId(), listRpcSceneCfg);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getScnCfgListCallBack(req									.getParams().getScnId(), listRpcSceneCfg);						}					} else if (requestId == RpcJsonParm.Id_DMRScnGenListGet) {						listRpcSceneGen = new ArrayList<RpcSceneGen>();						rpcCallback.getScnGenListCallBack(listRpcSceneGen);						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.getScnGenListCallBack(listRpcSceneGen);						}					} else if (requestId == RpcJsonParm.Id_DMRRoomListGet) {						listRpcRoom = new ArrayList<RpcRoom>();						rpcCallback.getRoomListCallBack(listRpcRoom);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getRoomListCallBack(listRpcRoom);						}					} else if (requestId == RpcJsonParm.Id_DMRDevScnNumListGet) {						listRpcDeviceScnNum = new ArrayList<RpcDevice>();						rpcCallback.getDeviceScnNumListCallBack(listRpcDeviceScnNum);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getDeviceScnNumListCallBack(listRpcDeviceScnNum);						}						listRpcDeviceScnNum = new ArrayList<RpcDevice>();					} else if (requestId == RpcJsonParm.Id_DMRDevListGet) {						listRpcDevice = new ArrayList<RpcDevice>();						rpcCallback.getDeviceListCallBack(listRpcDevice);						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.getDeviceListCallBack(listRpcDevice);						}					} else if (requestId == RpcJsonParm.Id_DMRIRSend) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						result.setRequest(task.getReqInfo());						rpcCallback.sendIrCodeCallBack(result);					} else if (requestId == RpcJsonParm.Id_DMRIRExFuncListGet) {						RepDMRIRExFuncListGet result = new RepDMRIRExFuncListGet();						result.setTimeout(true);						ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();						result.setRequest(req);						rpcCallback.getIRExFuncListCallBack(req.getParams()								.getDevId(), result);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getIRExFuncListCallBack(req									.getParams().getDevId(), result);						}					} else if (requestId == RpcJsonParm.Id_CTRSchTaskListGet) {						listRpcScheduler = new ArrayList<RpcScheduler>();						rpcCallback.getSchedulerListCallBack(listRpcScheduler);						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.getSchedulerListCallBack(listRpcScheduler);						}					} else if (requestId == RpcJsonParm.Id_CTRSchTaskClear) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqCTRSchTaskClear req = (ReqCTRSchTaskClear) task								.getReqInfo();						result.setRequest(req);						rpcCallback.clearSchedulerCallBack(req.getParams()								.getSchTaskId(), result);					} else if (requestId == RpcJsonParm.Id_CTRSchTaskParamSet) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqCTRSchTaskParamSet req = (ReqCTRSchTaskParamSet) task								.getReqInfo();						result.setRequest(req);						rpcCallback.setSchedulerParamCallBack(req.getParams()								.getSchTaskId(), result);					} else if (requestId == RpcJsonParm.Id_CTRSchOptionSet) {						RepCommonResult result = new RepCommonResult();						result.setTimeout(true);						ReqCTRSchOptionSet req = (ReqCTRSchOptionSet) task								.getReqInfo();						result.setRequest(req);						rpcCallback.operSchedulerCallBack(req.getParams()								.getSchTaskId(), result);					}					listTask.remove(task);				}			}		}	}	/**	 * <p>	 * Process for response	 * <p>	 * Parsing response String to Object by id(request) or method(event),then	 * invoke request's callback.	 * 	 * @param resp	 *            resp	 */	@Override	public synchronized void readDataCallBack(String resp) {		try {			Map<String, Object> resultMap = null;			try {				resultMap = gson.fromJson(resp,						new TypeToken<Map<String, Object>>() {						}.getType());			} catch (Exception e) {				e.printStackTrace();				return;			}			String attrMth = "method";			String attrTranId = "transId";			// if there is a method,the response is Event's report			if (resultMap.get(attrMth) != null) {				RepEvent event = gson.fromJson(resp, RepEvent.class);				try {					log.logErr("readDataCallBack EVENT:   " + resp);					String method = event.getMethod();					if (RpcJsonParm.EVENT_USM_EVT_Offline.equals(method)) {						disconnectedCallBack();						rpcCallback.eventUSMEVTOffline(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti.eventUSMEVTOffline(event.getParams());						}											} else if (RpcJsonParm.EVENT_DMR_EVT_LowBat.equals(method)) {						rpcCallback.eventDMREVTLowBat(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.eventDMREVTLowBat(event.getParams());						}					} else if (RpcJsonParm.EVENT_DMR_EVT_Level.equals(method)) {						rpcCallback.eventDMREVTLevel(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti.eventDMREVTLevel(event.getParams());						}					} else if (RpcJsonParm.EVENT_DMR_EVT_OnOff.equals(method)) {						rpcCallback.eventDMREVTOnOff(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti.eventDMREVTOnOff(event.getParams());						}					} else if (RpcJsonParm.EVENT_CTR_EVT_SchStat.equals(method)) {						rpcCallback.eventCTREVTSchStat(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti.eventCTREVTSchStat(event.getParams());						}					} else if (RpcJsonParm.EVENT_DMR_EVT_FH.equals(method)) {						event.getParams().setTemp(event.getParams().getTemp()/10);						rpcCallback.eventDMREVTFH(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti.eventDMREVTFH(event.getParams());						}					} else if (RpcJsonParm.EVENT_DMR_EVT_AC.equals(method)) {						event.getParams().setTemp(event.getParams().getTemp()/10);						rpcCallback.eventDMREVTAC(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti.eventDMREVTAC(event.getParams());						}					} else if (RpcJsonParm.EVENT_DMR_EVT_ES.equals(method)) {						rpcCallback.eventDMREVTES(event.getParams());						if (rpcCallbackUlti != null) {							rpcCallbackUlti.eventDMREVTES(event.getParams());						}					}				} catch (Exception e) {					e.printStackTrace();				}			} else if (resultMap.get(attrTranId) != null) {				// Request's response				Integer transId = ((Double) resultMap.get(attrTranId))						.intValue();				if (transId > 0) {					log.logErr("readDataCallBack:   " + resp);				}				if (resultMap.get("error") != null) {				}				RpcTask task = getRpcTask(transId);				if (task == null) {					return;				}				Integer requestId = task.getRequestId();				// the follow requestId is multi response,so need reset timeout				// when recieved data from socket				if (requestId == RpcJsonParm.Id_DMRPing || requestId == RpcJsonParm.Id_DMRBatScan) {					task.setStartTime(new java.util.Date(System							.currentTimeMillis()));				} else {					deleteRpcTask(transId);				}				// Convert response to object by unique ID				// if is nesscerry ,read request's parameter and set to object				// for UI				if (requestId == RpcJsonParm.Id_USMAuth) {					RepUSMAuth authenReturn = gson.fromJson(resp,							RepUSMAuth.class);					rpcCallback.authenCallBack(authenReturn);					if (authenReturn.getRetCode() == 0) {						isAdmin = (authenReturn.getResult().getType() == 2 || authenReturn								.getResult().getType() == 3);						ReqCommonParam req = new ReqCommonParam(0,								RpcJsonParm.Md_USMHeartBeat);						SslSocketKit.getInstance().beginKeepAlive(								keepLiveSeconds, gson.toJson(req));					}				} else if (requestId == RpcJsonParm.Id_SYSGwInfoGet) {					rpcCallback.getIpGwInfoCallBack(gson.fromJson(resp,							RepSYSGwInfoGet.class));				} else if (requestId == RpcJsonParm.Id_SYSDdnsInfoGet) {					rpcCallback.getDdnsInfoCallBack(gson.fromJson(resp,							RepSYSDdnsInfoGet.class));				} else if (requestId == RpcJsonParm.Id_USMEcOptionSet) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					rpcCallback.setEcOptionCallBack(result);				} else if (requestId == RpcJsonParm.Id_USMGnUserAdd) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					rpcCallback.addUserCallBack(result);				} else if (requestId == RpcJsonParm.Id_USMUserChange) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					rpcCallback.changeUserCallBack(result);				} else if (requestId == RpcJsonParm.Id_USMUserReset) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					rpcCallback.resetUserCallBack(result);				} else if (requestId == RpcJsonParm.Id_USMGnUserDel) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					rpcCallback.delUserCallBack(result);				} else if (requestId == RpcJsonParm.Id_USMGnUserListGet) {					RepUSMGnUserListGet result = gson.fromJson(resp,							RepUSMGnUserListGet.class);					rpcCallback.getUserListCallBack(result);				} else if (requestId == RpcJsonParm.Id_USMCancelLast) {					resultCancelLast = gson.fromJson(resp,							RepCommonResult.class);				} else if (requestId == RpcJsonParm.Id_DMRPing) {					RepDMRPing result = gson.fromJson(resp, RepDMRPing.class);					if (result.getRetCode() != 0 || !result.isHasContinue()) {						isPing = false;						this.deleteRpcTask(transId);					}					rpcCallback.pingCallBack(result);				} else if (requestId == RpcJsonParm.Id_DMRBatScan) {					RepDMRBatScan result = gson.fromJson(resp,							RepDMRBatScan.class);					if (result.getRetCode() != 0 || !result.isHasContinue()) {						this.deleteRpcTask(transId);					}					rpcCallback.scanBatteryCallBack(result);				} else if (requestId == RpcJsonParm.Id_DMROnOffGet) {					RepDMROnOffGet result = gson.fromJson(resp,							RepDMROnOffGet.class);					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback.getOnOffCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMROnOffSet) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMROnOffSet req = (ReqDMROnOffSet) task.getReqInfo();					result.setRequest(req);					rpcCallback.setOnOffTogCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRACGet) {					RepDMRACGet result = gson.fromJson(resp, RepDMRACGet.class);					result.getResult().setTemp((int)(result.getResult().getTemp()/10.0f));					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback.getACCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRACCtrl) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRACCtrl req = (ReqDMRACCtrl) task.getReqInfo();					result.setRequest(req);					rpcCallback.ctrlACCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRFHGet) {					RepDMRFHGet result = gson.fromJson(resp, RepDMRFHGet.class);					result.getResult().setTemp(result.getResult().getTemp()/10.0f);					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback.getFHCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRACSpecDataGet) {					RepDMRACSpecDataGet result = gson.fromJson(resp, RepDMRACSpecDataGet.class);					result.getResult().setLowTemp((int)(result.getResult().getLowTemp()/10.0f));					result.getResult().setHighTemp((int)(result.getResult().getHighTemp()/10.0f));					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback.getACSpecDataCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRFHSpecDataGet) {					RepDMRFHSpecDataGet result = gson.fromJson(resp, RepDMRFHSpecDataGet.class);					result.getResult().setLowTemp((int)(result.getResult().getLowTemp()/10.0f));					result.getResult().setHighTemp((int)(result.getResult().getHighTemp()/10.0f));					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback.getFHSpecDataCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRFHCtrl) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRFHCtrl req = (ReqDMRFHCtrl) task.getReqInfo();					req.getParams().setTemp(req.getParams().getTemp()/10);					result.setRequest(req);					rpcCallback.ctrlFHCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRLevelGet) {					RepDMRLevelGet result = gson.fromJson(resp,							RepDMRLevelGet.class);					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback.getLevelCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRLevelSet) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRLevelSet req = (ReqDMRLevelSet) task.getReqInfo();					result.setRequest(req);					rpcCallback.setLevelCallBack(req.getParams().getDevId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRLevelMove) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRLevelMove req = (ReqDMRLevelMove) task.getReqInfo();					result.setRequest(req);					rpcCallback							.moveCallBack(req.getParams().getDevId(), result);				} else if (requestId == RpcJsonParm.Id_DMRLevelStop) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback							.stopCallBack(req.getParams().getDevId(), result);				} else if (requestId == RpcJsonParm.Id_DMRDevNameSet) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRDevNameSet req = (ReqDMRDevNameSet) task.getReqInfo();					result.setRequest(req);					rpcCallback.setDeviceNameCallBack(req.getParams().getDevId(), result);				} else if (requestId == RpcJsonParm.Id_DMRScnNameSet) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRScnNameSet req = (ReqDMRScnNameSet) task.getReqInfo();					result.setRequest(req);					rpcCallback.setSceneNameCallBack(req.getParams().getScnId(), result);				} else if (requestId == RpcJsonParm.Id_DMRScnAdd) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRScnAdd req = (ReqDMRScnAdd) task.getReqInfo();					result.setRequest(req);					rpcCallback.addSceneDeviceCallBack(req.getParams()							.getScnId(), req.getParams().getDevId(), result);				} else if (requestId == RpcJsonParm.Id_DMRScnDel) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRScnDel req = (ReqDMRScnDel) task.getReqInfo();					result.setRequest(req);					rpcCallback.delSceneDeviceCallBack(req.getParams()							.getScnId(), req.getParams().getDevId(), result);				} else if (requestId == RpcJsonParm.Id_DMRScnRecall) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRScnCall req = (ReqDMRScnCall) task.getReqInfo();					result.setRequest(req);					rpcCallback.recallSceneCallBack(req.getParams().getScnId(),							result);				} else if (requestId == RpcJsonParm.Id_DMRBGMCtrl) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					ReqDMRBgmCtrl req = (ReqDMRBgmCtrl) task.getReqInfo();					result.setRequest(req);					rpcCallback.bgmCtrlCallBack(req.getParams().getDevId(), result);				}else if (requestId == RpcJsonParm.Id_DMRESGet) {					RepDMREsGet result = gson.fromJson(resp,							RepDMREsGet.class);					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					if (result.getResult() != null && result.getRetCode() == 0) {						rpcCallback.getEsListCallBack(result.getResult().getEsDataObjList(), result);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getEsListCallBack(result.getResult().getEsDataObjList(), result);						}					} else {						rpcCallback.getEsListCallBack(new ArrayList<RpcEsData>(), result);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getEsListCallBack(new ArrayList<RpcEsData>(), result);						}					}				} else if (requestId == RpcJsonParm.Id_DMRScnCfgListGet) {					RepDMRScnCfgListGet rep = gson.fromJson(resp,							RepDMRScnCfgListGet.class);					if (rep.getResult() != null && rep.getRetCode() == 0) {						List<RpcSceneCfg> list = rep.getResult()								.getScnCfgObjList();						if (list != null && list.size() > 0) {							for(RpcSceneCfg cfg : list){								if((cfg.getType() == 4 || cfg.getType() == 3) && cfg.getTemp() != null){									cfg.setTemp(cfg.getTemp() / 10);								}							}							listRpcSceneCfg.addAll(list);						}						if (rep.getResult().getTotalNumber() > listRpcSceneCfg								.size()) {							getScnCfgList();						} else {							ReqDMRScnCfgListGet req = (ReqDMRScnCfgListGet) task									.getReqInfo();							rpcCallback.getScnCfgListCallBack(req.getParams()									.getScnId(), listRpcSceneCfg);							if (rpcCallbackUlti != null) {								rpcCallbackUlti.getScnCfgListCallBack(req										.getParams().getScnId(),										listRpcSceneCfg);							}						}					} else {						ReqDMRScnCfgListGet req = (ReqDMRScnCfgListGet) task								.getReqInfo();						rpcCallback.getScnCfgListCallBack(req.getParams()								.getScnId(), listRpcSceneCfg);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getScnCfgListCallBack(req									.getParams().getScnId(), listRpcSceneCfg);						}					}				} else if (requestId == RpcJsonParm.Id_DMRScnGenListGet) {					RepDMRScnGenListGet rep = gson.fromJson(resp,							RepDMRScnGenListGet.class);					if (rep.getResult() != null && rep.getRetCode() == 0) {						List<RpcSceneGen> list = rep.getResult()								.getScnGenObjList();						if (list != null && list.size() > 0) {							listRpcSceneGen.addAll(list);						}						if (rep.getResult().getTotalNumber() > listRpcSceneGen								.size()) {							getScnGenList();						} else {							rpcCallback.getScnGenListCallBack(listRpcSceneGen);							if (rpcCallbackUlti != null) {								rpcCallbackUlti										.getScnGenListCallBack(listRpcSceneGen);							}						}					} else {						listRpcSceneGen = new ArrayList<RpcSceneGen>();						rpcCallback.getScnGenListCallBack(listRpcSceneGen);						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.getScnGenListCallBack(listRpcSceneGen);						}					}				} else if (requestId == RpcJsonParm.Id_DMRRoomListGet) {					RepDMRRoomListGet rep = gson.fromJson(resp,							RepDMRRoomListGet.class);					if (rep.getResult() != null && rep.getRetCode() == 0) {						List<RpcRoom> list = rep.getResult().getRoomObjList();						if (list != null && list.size() > 0) {							listRpcRoom.addAll(list);						}						if (rep.getResult().getTotalNumber() > listRpcRoom								.size()) {							getRoomList();						} else {							rpcCallback.getRoomListCallBack(listRpcRoom);							if (rpcCallbackUlti != null) {								rpcCallbackUlti										.getRoomListCallBack(listRpcRoom);							}						}					} else {						rpcCallback.getRoomListCallBack(listRpcRoom);						if (rpcCallbackUlti != null) {							rpcCallbackUlti.getRoomListCallBack(listRpcRoom);						}					}				} else if (requestId == RpcJsonParm.Id_DMRDevScnNumListGet) {					RepDMRDevScnNumListGet rep = gson.fromJson(resp,							RepDMRDevScnNumListGet.class);					if (rep.getResult() != null && rep.getRetCode() == 0) {						List<RpcDevice> list = rep.getResult()								.getDmrDevScnNumObjList();						if (list != null && list.size() > 0) {							listRpcDeviceScnNum.addAll(list);						}						if (rep.getResult().getTotalNumber() > listRpcDeviceScnNum								.size()) {							getAllDevScnNumList();						} else {							rpcCallback.getDeviceScnNumListCallBack(listRpcDeviceScnNum);							if (rpcCallbackUlti != null) {								rpcCallbackUlti										.getDeviceScnNumListCallBack(listRpcDeviceScnNum);							}							listRpcDeviceScnNum = new ArrayList<RpcDevice>();						}					} else {						listRpcDeviceScnNum = new ArrayList<RpcDevice>();						rpcCallback.getDeviceScnNumListCallBack(listRpcDeviceScnNum);						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.getDeviceScnNumListCallBack(listRpcDeviceScnNum);						}						listRpcDeviceScnNum = new ArrayList<RpcDevice>();					}				} else if (requestId == RpcJsonParm.Id_DMRDevListGet) {					RepDMRDevListGet rep = gson.fromJson(resp,							RepDMRDevListGet.class);					if (rep.getResult() != null && rep.getRetCode() == 0) {						List<RpcDevice> list = rep.getResult()								.getDmrDevObjList();						if (list != null && list.size() > 0) {							listRpcDevice.addAll(list);						}						if (rep.getResult().getTotalNumber() > listRpcDevice								.size()) {							getDeviceList();						} else {							rpcCallback.getDeviceListCallBack(listRpcDevice);							if (rpcCallbackUlti != null) {								rpcCallbackUlti										.getDeviceListCallBack(listRpcDevice);							}						}					} else {						listRpcDevice = new ArrayList<RpcDevice>();						rpcCallback.getDeviceListCallBack(listRpcDevice);						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.getDeviceListCallBack(listRpcDevice);						}					}				} else if (requestId == RpcJsonParm.Id_DMRIRSend) {					RepCommonResult result = gson.fromJson(resp,							RepCommonResult.class);					result.setRequest(task.getReqInfo());					rpcCallback.sendIrCodeCallBack(sendIrCodeReturn.get());				} else if (requestId == RpcJsonParm.Id_DMRIRExFuncListGet) {					RepDMRIRExFuncListGet result = gson.fromJson(resp,							RepDMRIRExFuncListGet.class);					ReqCommonDevId req = (ReqCommonDevId) task.getReqInfo();					result.setRequest(req);					rpcCallback.getIRExFuncListCallBack(req.getParams()							.getDevId(), result);					if (rpcCallbackUlti != null) {						rpcCallbackUlti.getIRExFuncListCallBack(req.getParams()								.getDevId(), result);					}				} else if (requestId == RpcJsonParm.Id_CTRSchTaskListGet) {					RepCTRSchTaskListGet rep = gson.fromJson(resp,							RepCTRSchTaskListGet.class);					if (rep.getResult() != null && rep.getRetCode() == 0) {						List<RpcScheduler> list = rep.getResult()								.getSchTaskSimpObjList();						if (list != null && list.size() > 0) {							listRpcScheduler.addAll(list);						}						if (rep.getResult().getTotalNumber() > listRpcScheduler								.size()) {							getSchedulerList();						} else {							rpcCallback									.getSchedulerListCallBack(listRpcScheduler);							if (rpcCallbackUlti != null) {								rpcCallbackUlti										.getSchedulerListCallBack(listRpcScheduler);							}						}					} else {						rpcCallback.getSchedulerListCallBack(listRpcScheduler);						if (rpcCallbackUlti != null) {							rpcCallbackUlti									.getSchedulerListCallBack(listRpcScheduler);						}					}				} else if (requestId == RpcJsonParm.Id_CTRSchTaskClear) {					RepCommonResult result = new RepCommonResult();					ReqCTRSchTaskClear req = (ReqCTRSchTaskClear) task							.getReqInfo();					result.setRequest(req);					rpcCallback.clearSchedulerCallBack(req.getParams()							.getSchTaskId(), result);				} else if (requestId == RpcJsonParm.Id_CTRSchTaskParamSet) {					RepCommonResult result = new RepCommonResult();					ReqCTRSchTaskParamSet req = (ReqCTRSchTaskParamSet) task							.getReqInfo();					result.setRequest(req);					rpcCallback.setSchedulerParamCallBack(req.getParams()							.getSchTaskId(), result);				} else if (requestId == RpcJsonParm.Id_CTRSchOptionSet) {					RepCommonResult result = new RepCommonResult();					ReqCTRSchOptionSet req = (ReqCTRSchOptionSet) task							.getReqInfo();					result.setRequest(req);					rpcCallback.operSchedulerCallBack(req.getParams()							.getSchTaskId(), result);				}			}		} catch (Exception e) {			e.printStackTrace();			log(e);		}	}	/**	 * <p>	 * Connected result callback	 * 	 * @param isConnected	 *            true or false	 */	@Override	public void connectedCallBack(boolean isConnected) {		if (!connectCallbacked) {			listTask = new ArrayList<RpcTask>();			rpcCallback.connected(isConnected);			if (taskTimeoutTimer == null) {				taskTimeoutTimer = new Timer();				if (rpcTimeoutTask != null) {					rpcTimeoutTask.cancel();					rpcTimeoutTask = null;				}				rpcTimeoutTask = new TimeoutTask();				taskTimeoutTimer.schedule(rpcTimeoutTask, 0 * 1000, 500);			}		}		connectCallbacked = true;	}	/**	 * <p>	 * communication error back	 * 	 * @param ex	 *            ex	 * @param exType	 *            exType @see ErrorType	 */	public void errorCallBack(Exception ex, ErrorType exType) {		if (rpcCallbackUlti != null) {			rpcCallbackUlti.disconnected();		}		EventParam param = new EventParam(exType);		rpcCallback.exceptionCallBack(ex, param);	}	/**	 * Disconnect from RPC server	 * <p>	 * Blocking API with one or more RPC command/response communication with RPC	 * server.	 * <p>	 * Limited to RPC client. At one time, only one API session including API	 * ARSP can be performed for current RPC client.	 * <p>	 * Can be Canceled: No	 */	public synchronized void disconnected() {		if (taskTimeoutTimer != null) {			taskTimeoutTimer.cancel();			taskTimeoutTimer = null;		}		if (rpcTimeoutTask != null) {			rpcTimeoutTask.cancel();			rpcTimeoutTask = null;		}		instance = null;		if (SslSocketKit.isConnected()) {			new Thread() {				public synchronized void run() {					if (SslSocketKit.getInstance() != null) {						SslSocketKit.getInstance().disconnect();						if (rpcCallbackUlti != null) {							rpcCallbackUlti.disconnected();						}						EventParam param = new EventParam(								ErrorType.DisConnected);						rpcCallback.exceptionCallBack(new Exception(								ErrorType.DisConnected.toString()), param);					}				}			}.start();		}	}	/**	 * <p>	 * USM_Auth	 * 	 * 	 * @param userName	 *            User name. No less than 5 bytes and no more than 10 bytes.	 *            Only letters and digits 0~9 are accepted.	 * @param pwd	 *            Password. No less than 5 bytes and no more than 10 bytes. Only	 *            letters and digits 0~9 are accepted.	 * @param deviceId	 *            Device Specific UUID. Should be in a format like	 *            12345678-1234-1234-1234-123456789abc. Only valid for platform	 *            “PC”, “android”, “iOS”, should be NULL for “WebUI”.	 *            {@link RpcCallBackIf#authenCallBack(RepUSMAuth)} to get	 *            result.	 */	public synchronized void authen(String userName, String pwd, String deviceId) {		ReqUSMAuth req = new ReqUSMAuth(++transId, RpcJsonParm.Md_USMAuth);		ParamUSMAuth param = req.getSimParam();		param.setUserName(userName);		param.setPwd(pwd);		param.setDeviceId(deviceId);		param.setPlatform(this.platform.toString());		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(), RpcJsonParm.Id_USMAuth,				req, RpcJsonParm.TimeoutTenSeconds);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepUSMAuth authenReturn = SslTest.repUSMAuth(gson.toJson(req));			RpcTask task = getRpcTask(authenReturn.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(authenReturn.getTransId());				rpcCallback.authenCallBack(authenReturn);			}		}	}	/**	 * <p>	 * Query IP GW Information	 * <p>	 * Blocking API with one or more RPC command/response communication with RPC	 * server.	 * <p>	 * No actual limitation. There may be API ARSPs for these APIs, but other	 * APIs can be accepted even the	 * <p>	 * API ARSPs for previous APIs are not received.	 * <p>	 * Can be Canceled: No	 * <p>	 * API: RPC_SYS_Get_IP_GW_Info	 * 	 * {@link RpcCallBackIf#getIpGwInfoCallBack(RepSYSGwInfoGet)} to get result.	 */	public synchronized void getIpGwInfo() {		ReqCommonParam req = new ReqCommonParam(++transId,				RpcJsonParm.Md_SYSGwInfoGet);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_SYSGwInfoGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepSYSGwInfoGet aaa = SslTest.repGetIpGwInfo(gson.toJson(req));			RpcTask task = getRpcTask(aaa.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(aaa.getTransId());				rpcCallback.getIpGwInfoCallBack(aaa);			}		}	}			public synchronized void getDdnsInfo() {		ReqCommonParam req = new ReqCommonParam(++transId,				RpcJsonParm.Md_SYSDdnsInfoGet);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_SYSDdnsInfoGet, req);		listTask.add(rpcTask);		SslSocketKit.getInstance().sendSocketData(gson.toJson(req));	}	public synchronized void setEcOption(boolean isExclusive) {		ReqUSMEcOptionSet req = new ReqUSMEcOptionSet(++transId,				RpcJsonParm.Md_USMEcOptionSet);		ParamUSMEcOptionSet param = req.getSimParam();		param.setIsExclusive(isExclusive);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_USMEcOptionSet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.setEcOptionCallBack(SslTest.repCommonResult(gson					.toJson(req)));		}	}	public synchronized void addUser(String userName, String pwd) {		ReqUSMGnUserAdd req = new ReqUSMGnUserAdd(++transId,				RpcJsonParm.Md_USMGnUserAdd);		ParamUSMGnUserAdd param = req.getSimParam();		param.setPwd(pwd);		param.setUserName(userName);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_USMGnUserAdd, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.addUserCallBack(SslTest.repCommonResult(gson					.toJson(req)));		}	}	public synchronized void changeUserPwd(String oldPwd, String newPwd) {		ReqUSMUserChange req = new ReqUSMUserChange(++transId,				RpcJsonParm.Md_USMUserChange);		ParamUSMUserChange param = req.getSimParam();		param.setNewPwd(newPwd);		param.setOldPwd(oldPwd);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_USMUserChange, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.changeUserCallBack(SslTest.repCommonResult(gson					.toJson(req)));		}	}	public synchronized void resetUser(String userName, String newPwd) {		ReqUSMUserReset req = new ReqUSMUserReset(++transId,				RpcJsonParm.Md_USMUserReset);		ParamUSMUserReset param = req.getSimParam();		param.setNewPwd(newPwd);		param.setUserName(userName);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_USMUserReset, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.resetUserCallBack(SslTest.repCommonResult(gson					.toJson(req)));		}	}	public synchronized void delUser(String userName) {		ReqUSMGnUserDel req = new ReqUSMGnUserDel(++transId,				RpcJsonParm.Md_USMGnUserDel);		ParamUSMGnUserDel param = req.getSimParam();		param.setUserName(userName);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_USMGnUserDel, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.delUserCallBack(SslTest.repDelUser(gson.toJson(req)));		}	}	public synchronized void getUserList() {		ReqCommonListGet req = new ReqCommonListGet(++transId,				RpcJsonParm.Md_USMGnUserListGet);		ParamBaseListGet param = req.getSimParam();		param.setStartIndex(1);		param.setMaxItems(10);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_USMGnUserListGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.getUserListCallBack(SslTest.repGetUserList(gson					.toJson(req)));		}	}	public synchronized void getRoomList() {		listRpcRoom = new ArrayList<RpcRoom>();		ReqCommonListGet req = new ReqCommonListGet(++transId,				RpcJsonParm.Md_DMRRoomListGet);		ParamBaseListGet param = req.getSimParam();		param.setStartIndex(1);		param.setMaxItems(50);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRRoomListGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.getRoomListCallBack(SslTest.repGetRoomList(gson					.toJson(req)));		}	}	public synchronized void getAllDevScnNumList() {			if (listRpcDeviceScnNum == null) {				listRpcDeviceScnNum = new ArrayList<RpcDevice>();			}			ReqDMRDevListGet req = new ReqDMRDevListGet(++transId,					RpcJsonParm.Md_DMRDevScnNumListGet);			ParamDMRDevListGet param = req.getSimParam();			param.setDevType(65535);			param.setStartIndex(listRpcDeviceScnNum.size() + 1);			param.setMaxItems(50);			req.setParams(param);			RpcTask rpcTask = new RpcTask(req.getTransId(),					RpcJsonParm.Id_DMRDevScnNumListGet, req);			listTask.add(rpcTask);			if (!isDebug) {				SslSocketKit.getInstance().sendSocketData(gson.toJson(req));			} else {				rpcCallback.getDeviceListCallBack(SslTest.repGetDeviceList(gson						.toJson(req)));			}	}		public synchronized void getDeviceList() {		if (listRpcDevice == null) {			listRpcDevice = new ArrayList<RpcDevice>();		}		ReqDMRDevListGet req = new ReqDMRDevListGet(++transId,				RpcJsonParm.Md_DMRDevListGet);		ParamDMRDevListGet param = req.getSimParam();		param.setDevType(65535);		param.setStartIndex(listRpcDevice.size() + 1);		param.setMaxItems(50);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRDevListGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.getDeviceListCallBack(SslTest.repGetDeviceList(gson					.toJson(req)));		}	}		RepCommonResult resultCancelLast = null;	public synchronized RepCommonResult cancelLast() {		resultCancelLast = null;		ReqCommonParam req = new ReqCommonParam(++transId,				RpcJsonParm.Md_USMCancelLast);		RpcTask rpcTask = new RpcTask(req.getTransId(),RpcJsonParm.Id_USMCancelLast, req);		listTask.add(rpcTask);		SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		while(resultCancelLast == null){			sleep();		}		return resultCancelLast;	}		public synchronized void ping(int[] devIds) {		if(isPing){			cancelLast();			isPing = false;		}		isPing = true;		ReqDMRPingDevIdList req = new ReqDMRPingDevIdList(++transId,				RpcJsonParm.Md_DMRPing);		List<ParamDevId> devIdList = new ArrayList<ParamDevId>();		for (int devId : devIds) {			ParamDevId pd = new ParamDevId();			pd.setDevId(devId);			devIdList.add(pd);		}		com.example.sychiprpclibmcc.req.ReqDMRPingDevIdList.ParamCommonDevIdList param = req.getSimParam();		param.setDevIdObjList(devIdList);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(), RpcJsonParm.Id_DMRPing,				req, RpcJsonParm.Timeout100Seconds);		listTask.add(rpcTask);		SslSocketKit.getInstance().sendSocketData(gson.toJson(req));	}	public synchronized void scanBattery() {		ReqCommonParam req = new ReqCommonParam(++transId,				RpcJsonParm.Md_DMRBatScan);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRBatScan, req, RpcJsonParm.Timeout100Seconds);		listTask.add(rpcTask);		SslSocketKit.getInstance().sendSocketData(gson.toJson(req));	}		public synchronized void setDeviceName(int devId, String name) {		ReqDMRDevNameSet req = new ReqDMRDevNameSet(++transId,				RpcJsonParm.Md_DMRDevNameSet);		ParamDMRDevNameSet param = req.getSimParam();		param.setDevId(devId);		param.setName(name);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRDevNameSet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult result = SslTest.repCommonResult(gson.toJson(req));			RpcTask task = getRpcTask(result.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(result.getTransId());				rpcCallback.setDeviceNameCallBack(devId, result);			}		}	}	public synchronized void setSceneName(int scnId, String scnName) {		ReqDMRScnNameSet req = new ReqDMRScnNameSet(++transId,				RpcJsonParm.Md_DMRScnNameSet);		ParamDMRScnNameSet param = req.getSimParam();		param.setScnId(scnId);		param.setScnName(scnName);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRScnNameSet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult result = SslTest.repCommonResult(gson.toJson(req));			RpcTask task = getRpcTask(result.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(result.getTransId());				rpcCallback.setSceneNameCallBack(scnId, result);			}		}	}	public synchronized void getAllScnGenList() {		if (!isDebug) {			listRpcSceneGen = new ArrayList<RpcSceneGen>();			getScnGenList();		} else {			rpcCallback.getScnGenListCallBack(listRpcSceneGen);		}	}	private synchronized void getScnGenList() {		ReqCommonListGet req = new ReqCommonListGet(++transId,				RpcJsonParm.Md_DMRScnGenListGet);		ParamBaseListGet param = req.getSimParam();		param.setStartIndex(listRpcSceneGen.size() + 1);		param.setMaxItems(50);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRScnGenListGet, req);		listTask.add(rpcTask);		SslSocketKit.getInstance().sendSocketData(gson.toJson(req));	}	public synchronized void getScnAllCfgList(int scnId) {		if (!isDebug) {			listRpcSceneCfg = new ArrayList<RpcSceneCfg>();			scnCfgId = scnId;			getScnCfgList();		} else {			rpcCallback.getScnCfgListCallBack(scnCfgId, listRpcSceneCfg);		}	}	private synchronized void getScnCfgList() {		ReqDMRScnCfgListGet req = new ReqDMRScnCfgListGet(++transId,				RpcJsonParm.Md_DMRScnCfgListGet);		ParamDMRScnCfgListGet param = req.getSimParam();		param.setScnId(scnCfgId);		param.setStartIndex(listRpcSceneCfg.size() + 1);		param.setMaxItems(50);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRScnCfgListGet, req);		listTask.add(rpcTask);		SslSocketKit.getInstance().sendSocketData(gson.toJson(req));	}		/**	 * <p>	 * DMR_Scn_Add	 * 	 * @param scene	 *            <p>	 *            {@link RpcCallBackIf#addSceneCallBack(RepCommonResult)} to get	 *            result.	 */	public synchronized void addSceneDevice(ObjScene param) {		ReqDMRScnAdd req = new ReqDMRScnAdd(++transId, RpcJsonParm.Md_DMRScnAdd);		if ((param.getType() == 4 || param.getType() == 3) && param.getTemp() != null) {			param.setTemp(param.getTemp() * 10.0f);		}		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRScnAdd, req);		listTask.add(rpcTask);		if (!isDebug) {			String aa= gson.toJson(req);			if(param.getTemp() != null)				aa = aa.replace("\"temp\":"+param.getTemp(), "\"temp\":"+param.getTemp().intValue());			SslSocketKit.getInstance().sendSocketData(aa);		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			RpcTask task = getRpcTask(aaa.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(aaa.getTransId());				rpcCallback.addSceneDeviceCallBack(param.getScnId(),						param.getDevId(), aaa);			}		}	}	public synchronized void delSceneDevice(int scnId, int devId) {		ReqDMRScnDel req = new ReqDMRScnDel(++transId, RpcJsonParm.Md_DMRScnDel);		ParamDMRScnDel param = req.getSimParam();		param.setDevId(devId);		param.setScnId(scnId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRScnDel, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.delSceneDeviceCallBack(scnId, devId, aaa);		}	}	public synchronized Integer recallScene(int scnId) {		ReqDMRScnCall req = new ReqDMRScnCall(++transId,				RpcJsonParm.Md_DMRScnRecall);		ParamDMRScnCall param = req.getSimParam();		param.setScnId(scnId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRScnRecall, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.recallSceneCallBack(scnId, aaa);		}		return req.getTransId();	}	/**	 * <p>	 * Get On/Off status	 * <p>	 * API without API ARSP or with one or more API ARSP.	 * <p>	 * No actual limitation. There may be API ARSPs for these APIs, but other	 * APIs can be accepted even the API ARSPs for previous APIs are not	 * received.	 * <p>	 * Can be Canceled: No	 * <p>	 * API: RPC_ZCL_Get_OnOff	 * 	 * @param devId	 *            <p>	 *            .	 * @param isBlock	 *            ture for Block, false for nonBlock	 * @return {@link RepGetOnOff}	 *         <p>	 *         If isBlock = true, result will be return.	 *         <p>	 *         If isBlock = false,null will be return and you should override	 *         {@link RpcCallBackIf#getOnOffCallBack(RepGetOnOff)} to get result	 */	public synchronized void getOnOff(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMROnOffGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMROnOffGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepDMROnOffGet result = SslTest.repGetOnOff(gson.toJson(req));			RpcTask task = getRpcTask(result.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(result.getTransId());				rpcCallback.getOnOffCallBack(devId, result);			}		}	}	public synchronized Integer setOnOffTog(int devId, OnOff onOff) {		ReqDMROnOffSet req = new ReqDMROnOffSet(++transId,				RpcJsonParm.Md_DMROnOffSet);		ParamDMROnOffSet param = req.getSimParam();		param.setDevId(devId);		param.setOnOff(onOff.value);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMROnOffSet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.setOnOffTogCallBack(devId, aaa);		}		return req.getTransId();	}	public synchronized void getAC(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRACGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRACGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			// RepDMRACGet result = SslTest.repOnLevel(gson.toJson(req));			// this.deleteRpcTask(result.getTransId());			// rpcCallback.getACCallBack(devId, result);		}	}		public synchronized void getACSpecData(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRACSpecDataGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRACSpecDataGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepDMRLevelGet result = SslTest.repOnLevel(gson.toJson(req));			this.deleteRpcTask(result.getTransId());			rpcCallback.getLevelCallBack(devId, result);		}	}		public synchronized Integer ctrlBGM(int devId, MusicCmd cmd, int param) {		ReqDMRBgmCtrl req = new ReqDMRBgmCtrl(++transId, RpcJsonParm.Md_DMRBGMCtrl);		ParamDMRBgmCtrl paramBgm = req.getSimParam();		paramBgm.setDevId(devId);		paramBgm.setCtrlCmd(cmd.value);		paramBgm.setParam(param);		req.setParams(paramBgm);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRBGMCtrl, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.ctrlACCallBack(devId, aaa);		}		return req.getTransId();	}	public synchronized Integer getEsData(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRESGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRESGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepDMRLevelGet result = SslTest.repOnLevel(gson.toJson(req));			this.deleteRpcTask(result.getTransId());			rpcCallback.getLevelCallBack(devId, result);		}		return req.getTransId();	}			public synchronized Integer ctrlAC(int devId, OnOff onOff, ACMode mode,			ACWind wind, int temp) {		ReqDMRACCtrl req = new ReqDMRACCtrl(++transId, RpcJsonParm.Md_DMRACCtrl);		ParamDMRACCtrl param = req.getSimParam();		param.setDevId(devId);		param.setOnOff(onOff.value);		param.setMode(mode.value);		param.setWind(wind.value);		param.setTemp(temp * 10);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRACCtrl, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.ctrlACCallBack(devId, aaa);		}		return req.getTransId();	}	public synchronized void getFH(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRFHGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRFHGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepDMRLevelGet result = SslTest.repOnLevel(gson.toJson(req));			this.deleteRpcTask(result.getTransId());			rpcCallback.getLevelCallBack(devId, result);		}	}		public synchronized void getFHSpecData(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRFHSpecDataGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRFHSpecDataGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepDMRLevelGet result = SslTest.repOnLevel(gson.toJson(req));			this.deleteRpcTask(result.getTransId());			rpcCallback.getLevelCallBack(devId, result);		}	}	public synchronized Integer ctrlFH(int devId, OnOff onOff, float temp) {		ReqDMRFHCtrl req = new ReqDMRFHCtrl(++transId, RpcJsonParm.Md_DMRFHCtrl);		ParamDMRFHCtrl param = req.getSimParam();		param.setDevId(devId);		param.setOnOff(onOff.value);		param.setTemp((int)(temp * 10.0f));		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRFHCtrl, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.ctrlFHCallBack(devId, aaa);		}		return req.getTransId();	}	public synchronized void getLevel(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRLevelGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRLevelGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepDMRLevelGet result = SslTest.repOnLevel(gson.toJson(req));			this.deleteRpcTask(result.getTransId());			rpcCallback.getLevelCallBack(devId, result);		}	}	/**	 * <p>	 * Set level operation,only to indicate the operation is success or not	 * <p>	 * API without API ARSP or with one or more API ARSP.	 * <p>	 * No actual limitation. There may be API ARSPs for these APIs, but other	 * APIs can be accepted even the API ARSPs for previous APIs are not	 * received.	 * <p>	 * Can be Canceled: No	 * <p>	 * API: RPC_ZCL_Set_On_Level	 * 	 * You can override	 * {@link RpcCallBackIf#setOnLevelCallBack(RepCommonResult)} to get result	 * 	 * @param devId	 *            <p>	 * @param level	 *            <p>	 * @param tt	 *            <p>	 * 	 */	public synchronized void setLevel(int devId, int level, int tt) {		ReqDMRLevelSet req = new ReqDMRLevelSet(++transId,				RpcJsonParm.Md_DMRLevelSet);		ParamDMRLevelSet param = req.getSimParam();		param.setDevId(devId);		param.setLevel(level);		param.setTt(tt);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRLevelSet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult result = SslTest.repCommonResult(gson.toJson(req));			RpcTask task = getRpcTask(result.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(result.getTransId());				rpcCallback.setLevelCallBack(devId, result);			}		}	}	/**	 * <p>	 * Move operation	 * <p>	 * API without API ARSP or with one or more API ARSP.	 * <p>	 * No actual limitation. There may be API ARSPs for these APIs, but other	 * APIs can be accepted even the API ARSPs for previous APIs are not	 * received.	 * <p>	 * Can be Canceled: No	 * <p>	 * API: RPC_ZCL_Move	 * 	 * @param addr	 *            addr Short address.	 *            <p>	 * @param epId	 *            number Endpoint ID.	 *            <p>	 * @param addrMode	 *            number The field "addrMode" may be 1 (group address) or 2	 *            (network address).	 *            <p>	 * @param mode	 *            number The move direction. 0 is for up and 1 for down.	 *            <p>	 * @param rate	 *            number The move rate. From 0 to 255. It is 255 for move as	 *            fast as possible, and other value for real rate in unit per	 *            second.	 *            <p>	 */	public synchronized void move(int devId, MoveUpDown upDown, int rate) {		ReqDMRLevelMove req = new ReqDMRLevelMove(++transId,				RpcJsonParm.Md_DMRLevelMove);		ParamDMRLevelMove param = req.getSimParam();		param.setDevId(devId);		param.setMode(upDown.value);		param.setRate(rate);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRLevelMove, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.moveCallBack(devId, aaa);		}	}	/**	 * <p>	 * Stop operation	 * <p>	 * API without API ARSP or with one or more API ARSP.	 * <p>	 * No actual limitation. There may be API ARSPs for these APIs, but other	 * APIs can be accepted even the API ARSPs for previous APIs are not	 * received.	 * <p>	 * Can be Canceled: No	 * <p>	 * API: RPC_ZCL_Stop	 * 	 * @param devId	 *            <p>	 * 	 */	public synchronized void stop(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRLevelStop);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRLevelStop, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			// this is debug mode			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.stopCallBack(devId, aaa);		}	}	public synchronized void getIRExFuncList(int devId) {		ReqCommonDevId req = new ReqCommonDevId(++transId,				RpcJsonParm.Md_DMRIRExFuncListGet);		ParamDevId param = new ParamDevId();		param.setDevId(devId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRIRExFuncListGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepDMRIRExFuncListGet aaa = SslTest.repDMRIRExFuncListGet(gson					.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.getIRExFuncListCallBack(devId, aaa);		}	}	AtomicReference<RepCommonResult> sendIrCodeReturn = new AtomicReference<RepCommonResult>();	/**	 * <p>	 * Send IR Code	 * <p>	 * API without API ARSP or with one or more API ARSP.	 * <p>	 * Limited to device. At one time, only one API session including API ARSP	 * can be performed for specific device.	 * <p>	 * Can be Canceled: No	 * <p>	 * API : RPC_ZCL_Send_IR_Code	 * <p>	 * 	 * @param devId	 *            .	 *            <p>	 * @param funcId	 *            .	 *            <p>	 * @param repeat	 *            number Repeat times.	 * @param codeType	 *            The type of irCode. 0 for library code and 1 for learning	 *            code. Should be ignored if irCode is a null array.	 */	public synchronized void sendIrCode(int devId, int funcId, int repeat,			IRCodeType codeType) {		sendIrCodeReturn.set(null);		ReqDMRIRSend req = new ReqDMRIRSend(++transId, RpcJsonParm.Md_DMRIRSend);		ParamDMRIRSend param = req.getSimParam();		param.setRepeat(repeat);		param.setFuncId(funcId);		param.setDevId(devId);		param.setCodeType(codeType.value);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_DMRIRSend, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			RpcTask task = getRpcTask(aaa.getTransId());			if (task == null) {			} else {				this.deleteRpcTask(aaa.getTransId());				rpcCallback.sendIrCodeCallBack(aaa);			}		}	}	public synchronized void getSchedulerList() {		listRpcScheduler = new ArrayList<RpcScheduler>();		ReqCommonListGet req = new ReqCommonListGet(++transId,				RpcJsonParm.Md_CTRSchTaskListGet);		ParamBaseListGet param = req.getSimParam();		param.setStartIndex(1);		param.setMaxItems(16);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_CTRSchTaskListGet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			rpcCallback.getSchedulerListCallBack(SslTest					.repGetSchedulerList(gson.toJson(req)));		}	}	public synchronized void clearScheduler(int schTaskId) {		ReqCTRSchTaskClear req = new ReqCTRSchTaskClear(++transId,				RpcJsonParm.Md_CTRSchTaskClear);		ParamCTRSchTaskClear param = req.getSimParam();		param.setSchTaskId(schTaskId);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_CTRSchTaskClear, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			// this is debug mode			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.clearSchedulerCallBack(schTaskId, aaa);		}	}	public synchronized void setSchedulerParam(ParamCTRSchTaskParamSet param) {		ReqCTRSchTaskParamSet req = new ReqCTRSchTaskParamSet(++transId,				RpcJsonParm.Md_CTRSchTaskParamSet);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_CTRSchTaskParamSet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.setSchedulerParamCallBack(param.getSchTaskId(), aaa);		}	}	public synchronized void operScheduler(int schTaskId, SchedulerOption opt) {		ReqCTRSchOptionSet req = new ReqCTRSchOptionSet(++transId,				RpcJsonParm.Md_CTRSchOptionSet);		ParamCTRSchOptionSet param = req.getSimParam();		param.setSchTaskId(schTaskId);		param.setOption(opt.value);		req.setParams(param);		RpcTask rpcTask = new RpcTask(req.getTransId(),				RpcJsonParm.Id_CTRSchOptionSet, req);		listTask.add(rpcTask);		if (!isDebug) {			SslSocketKit.getInstance().sendSocketData(gson.toJson(req));		} else {			// this is debug mode			RepCommonResult aaa = SslTest.repCommonResult(gson.toJson(req));			this.deleteRpcTask(aaa.getTransId());			rpcCallback.operSchedulerCallBack(schTaskId, aaa);		}	}	/**	 * Show Log	 * 	 * @param show	 *            true:show log,false:not show	 * @param _log	 *            LogIf	 */	public void setShowLog(boolean show, LogIf _log) {		if (_log != null) {			log = _log;		} else {			log = new LogDefault();		}		showLog = show;		SslSocketKit.log = log;		SslSocketKit.showLog = showLog;	}	private static void log(Object param) {		if (showLog) {			log.logErr(param);		}	}	@Override	public void disconnectedCallBack() {		if (taskTimeoutTimer != null) {			taskTimeoutTimer.cancel();			taskTimeoutTimer = null;		}		if (rpcTimeoutTask != null) {			rpcTimeoutTask.cancel();			rpcTimeoutTask = null;		}		if (rpcCallbackUlti != null) {			rpcCallbackUlti.disconnected();		}		rpcCallback.disconnected();		SslSocketKit.getInstance().disconnect(false);	}}